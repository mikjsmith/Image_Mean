m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n+1){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
library(tiff)
tiff1 <- readTIFF("./mean/input/1.tif")
tiff2 <- readTIFF("./mean/input/2.tif")
m_image_tiff1 <- (tiff2+tiff1)/2
writeTIFF(m_image_tiff1,"./mean/mean_tiff.tif")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n+1){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
library(tiff)
tiff1 <- readTIFF("./mean/input/1.tif")
tiff2 <- readTIFF("./mean/input/2.tif")
m_image_tiff1 <- (tiff2+tiff1)/2
writeTIFF(m_image_tiff1,"./mean/mean_tiff.tif")
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
t=0
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
t=t+1
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
t=0
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n+1){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
t=t+1
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
t=0
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
t=t+1
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
#Alternative using standard library
library(tiff)
tiff1 <- readTIFF("./mean/input/1.tif")
tiff2 <- readTIFF("./mean/input/2.tif")
m_image_tiff1 <- (tiff2+tiff1)/2
writeTIFF(m_image_tiff1,"./mean/mean_tiff.tif")
tiff1[1,1]
tiff1[1,1,1]
tiff2[1,1,1]
m_image_tiff1[1,1,1]
tiff1[2,1,1]
tiff2[2,1,1]
m_image_tiff1[2,1,1]
tiff1[3,1,1]
tiff2[3,1,1]
m_image_tiff1[3,1,1]
tiff1[4,1,1]
tiff1[4,1,2]
tiff1[4,1,3]
tiff1[4,1,4]
tiff1[1,1,1]
tiff1[1,1,2]
tiff1[1,1,3]
tiff2[1,1,1]
tiff2[1,1,2]
tiff2[1,1,3]
m_image_tiff1[1,1,1]
m_image_tiff1[1,1,2]
m_image_tiff1[1,1,3]
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean
m_image_tiff2 <- (m_image_tiff/n)
writeTIFF(m_image_tiff2,"./mean/mean_tiff.tif")
tiff1[1,1,1]
tiff1[1,1,2]
tiff1[1,1,3]
m_image_tiff1[1,1,1]
m_image_tiff1[1,1,2]
m_image_tiff1[1,1,3]
test_tiff <- readTIFF("./mean/mean_tiff.tif")
test_tiff[1,1,1]
m_image_tiff1[1,1,1]
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean and write TIF
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per-sample=16L)
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean and write TIF
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per.sample=16L)
test_tiff <- readTIFF("./mean/mean_tiff.tif")
test_tiff[1,1,1]
m_image_tiff1[1,1,1]
library(tiff)
tiff1 <- readTIFF("./mean/input/1.tif")
tiff2 <- readTIFF("./mean/input/2.tif")
m_image_tiff1 <- (tiff2+tiff1)/2
writeTIFF(m_image_tiff1,"./mean/mean_tiff.tif")
#Alternative using standard library with iteration
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean and write TIF
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per.sample=16L)
library(dplyr)
library(ggplot2)
#SQL Query
#SELECT p.school_id, p.class_id, p.userid, p.firstname, p.surname, r.factor, r.multiplier, r.correct, r.answer, r.id, r.game_id, g.type_id FROM `tblResultTimesTables` as r INNER JOIN tblGames as g ON r.`game_id` = g.`id` LEFT OUTER JOIN tblPupils as p ON p.userid = g.`user_id` WHERE g.`type_id` = 34  AND g.`start` BETWEEN '2015-09-04' AND '2016-07-01' ORDER By id ASC
#Read raw data
tt = read.table("TT_all.csv", header=TRUE, sep=",", dec=".", na.strings=c("NA"))
#Read original data
data <- read.csv("http://www.lecturematerials.co.uk/data/times_tables.csv",header=T)
#Group by TT Question
tt_group = group_by(tt,multiplier,factor)
#as.numeric to convert factor datatype to numeric
tt_sum = summarise(tt_group, correct=sum(as.numeric(correct)), count=n(),incorrect=(((count-correct)/count)*100))
tt_sum$difference <- data$incorrect - tt_sum$incorrect
tt_sum$orig_incorecct <- data$incorrect
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
# ggplot(tt_sum,aes(x=multiplier,y=factor)) +
#   geom_point(aes(colour=difference), size=8, shape=15) +
#   scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
#   ggtitle("Times Tables Answer Accuracy Difference (%)") +
#   scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=c(2,4,6,8,10,12)) +
#   scale_y_continuous(name="Factor", limits=c(2, 12), breaks=c(2,4,6,8,10,12)) +
#   geom_abline(intercept = 0, slope = 1, size=1) +
#   coord_fixed() +
#   background_grid(major = "xy", minor = "none")
#
# write.csv(tt_sum, file = "TT_accuracy.csv")
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()
ggplot2(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
library(cowplot)
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
View(data)
write.csv(tt_sum, file = "TT_accuracy.csv")
# Load the reshape2 and ggplot2 packages
library(reshape2)
library(ggplot2)
library(ggthemes)
library(cowplot)
library(readxl)
#Plot to A4 PDF
#pdf(file = "test.pdf", paper="a4")
# Read in the data
#ds1 <- read.csv("http://www.lecturematerials.co.uk/data/spelling.csv")
ds1 <- read_excel("WSAD_04_05_16.xlsx",col_names=TRUE,sheet=6, na="N/A")
#Keeps the first 60 rows (leavers are removed from rows below)
ds1<-ds1[c(1:60),]
stages_cvs<-c("ST1E","ST1D","ST1S","ST1R","ST2E","ST2D","ST2S","ST2R","ST3E","ST3D","ST3S","ST3R","ST4D","ST4D","ST4S","ST4R","ST5E","ST5D","ST5S","ST5R","ST6E","ST6D","ST6S","ST6R")
#Factorise reading
ds1[,98]<-as.integer(factor(ds1[,98],levels=stages_cvs))
ds1[,101]<-as.integer(factor(ds1[,101],levels=stages_cvs))
ds1[,105]<-as.integer(factor(ds1[,105],levels=stages_cvs))
ds1[,107]<-as.integer(factor(ds1[,107],levels=stages_cvs))
#Factorise writing
ds1[,129]<-as.integer(factor(ds1[,129],levels=stages_cvs))
ds1[,132]<-as.integer(factor(ds1[,132],levels=stages_cvs))
ds1[,134]<-as.integer(factor(ds1[,134],levels=stages_cvs))
ds1[,136]<-as.integer(factor(ds1[,136],levels=stages_cvs))
#Factorise maths
ds1[,168]<-as.integer(factor(ds1[,168],levels=stages_cvs))
ds1[,169]<-as.integer(factor(ds1[,169],levels=stages_cvs))
ds1[,171]<-as.integer(factor(ds1[,171],levels=stages_cvs))
ds1[,173]<-as.integer(factor(ds1[,173],levels=stages_cvs))
ds1[,180]<-as.integer(factor(ds1[,180],levels=stages_cvs))
ds1[,181]<-as.integer(factor(ds1[,181],levels=stages_cvs))
ds1[,183]<-as.integer(factor(ds1[,183],levels=stages_cvs))
# Get the sample sizes per variable
ns <- apply(ds1, 2, function(x) sum(!is.na(x)))
# Create a data frame for the variables and sample sizes (see below)
ndf <- data.frame(variable = names(ds1), n = ns)
# Create a data frame for the variables interested in and rename the variables
vernon<-data.frame(ds1[,27],ds1[,29],ds1[,31],ds1[,33],ds1[,35],ds1[,37])
names(vernon)<-c("1","2","3","4","5","6")
burt<-data.frame(ds1[,39],ds1[,41],ds1[,43],ds1[,45],ds1[,47],ds1[,49])
names(burt)<-c("1","2","3","4","5","6")
big_write<-data.frame(ds1[,51],ds1[,52],ds1[,53],ds1[,54])
names(big_write)<-c("1","2","3","4")
TT<-data.frame(ds1[,66],ds1[,67],ds1[,68],ds1[,69],ds1[,70])
names(TT)<-c("1","2","3","4","5")
stage_read<-data.frame(ds1[,98],ds1[,101],ds1[,105],ds1[,107])
names(stage_read)<-c("1","2","3","4")
stage_write<-data.frame(ds1[,129],ds1[,132],ds1[,134],ds1[,136])
names(stage_write)<-c("1","2","3","4")
stage_math<-data.frame(ds1[,168],ds1[,169],ds1[,171],ds1[,173],ds1[,180],ds1[,181],ds1[,183])
names(stage_math)<-c("1","2","3","4","5","6","7")
# Convert the data from wide to long form (concatenate)
# Result is a two column data frame:
#    - variable: a factor with variable names as levels
#    - value: a numeric variable with stacked responses
dsm <- melt(vernon)
# Use the dsm data frame for the plot and the
# ndf data frame for the labels
gg1<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + ylab("Vernon") + xlab("Time Point") +
coord_flip()
dsm <- melt(burt)
gg2<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + ylab("Burt") + xlab("Time Point") +
coord_flip()
dsm <- melt(big_write)
gg3<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + ylab("Big Write") + xlab("Time Point") +
coord_flip()
dsm <- melt(TT)
gg4<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + ylab("Times Tables") + xlab("Time Point") +
coord_flip()
p<-plot_grid(gg1,gg2,gg3,gg4, labels=c("A", "B", "C", "D"), ncol = 2, nrow = 2)
title <- ggdraw() + draw_label("Baseline Testing 2016", fontfamily='serif', fontface='bold', size='30')
plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1), align=c("h")) # rel_heights values control title margins
#Plot Stage Data
dsm <- melt(stage_read)
gg2<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + xlab("Time Point") +
scale_y_continuous(name="Reading (Stage)", limits=c(0, 24), breaks=seq(2,24,by=2)) +
coord_flip()
dsm <- melt(stage_write)
gg3<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + xlab("Time Point") +
scale_y_continuous(name="Writing (Stage)", limits=c(0, 24), breaks=seq(2,24,by=2)) +
coord_flip()
dsm <- melt(stage_math)
gg4<-ggplot(dsm, aes(x = variable, y = value)) +
theme_tufte(base_size = 15) + theme(line=element_blank()) +
geom_violin(fill = "white") +
geom_boxplot(fill = "black", alpha = 0.3, width = 0.1) + xlab("Time Point") +
scale_y_continuous(name="Maths (Stage)", limits=c(0, 24), breaks=seq(2,24,by=2)) +
coord_flip()
p<-plot_grid(gg2,gg3,gg4, labels=c("A", "B", "C", "D"), ncol = 2, nrow = 2)
title <- ggdraw() + draw_label("Baseline Testing 2016", fontfamily='serif', fontface='bold', size='30')
plot_grid(title, p, ncol=1, rel_heights=c(0.1, 1), align=c("h")) # rel_heights values control title margins
#Finish PDF printing
#dev.off()
library(dplyr)
library(ggplot2)
library(cowplot)
#SQL Query
#SELECT p.school_id, p.class_id, p.userid, p.firstname, p.surname, r.factor, r.multiplier, r.correct, r.answer, r.id, r.game_id, g.type_id FROM `tblResultTimesTables` as r INNER JOIN tblGames as g ON r.`game_id` = g.`id` LEFT OUTER JOIN tblPupils as p ON p.userid = g.`user_id` WHERE g.`type_id` = 34  AND g.`start` BETWEEN '2015-09-04' AND '2016-07-01' ORDER By id ASC
#Read raw data
tt = read.table("TT_all.csv", header=TRUE, sep=",", dec=".", na.strings=c("NA"))
#Read original data
data <- read.csv("http://www.lecturematerials.co.uk/data/times_tables.csv",header=T)
#Group by TT Question
tt_group = group_by(tt,multiplier,factor)
#as.numeric to convert factor datatype to numeric
tt_sum = summarise(tt_group, correct=sum(as.numeric(correct)), count=n(),incorrect=(((count-correct)/count)*100))
tt_sum$difference <- data$incorrect - tt_sum$incorrect
tt_sum$orig_incorecct <- data$incorrect
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
save_plot("accuracy.pdf", plot_ac,
base_aspect_ratio = 1.3 # make room for figure legend
)
plot_ac <- ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=incorrect), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
save_plot("accuracy.pdf", plot_ac,
base_aspect_ratio = 1.3 # make room for figure legend
)
ggplot(tt_sum,aes(x=multiplier,y=factor)) +
geom_point(aes(colour=difference), size=8, shape=15) +
scale_colour_distiller(palette = "Spectral", direction=-1, guide="colourbar", name="Incorrect (%)") +
ggtitle("Times Tables Answer Accuracy (%)") +
scale_x_continuous(name="Multiplier", limits=c(2, 12), breaks=seq(2,12,by=2)) +
scale_y_continuous(name="Factor", limits=c(2, 12), breaks=seq(2,12,by=2)) +
geom_abline(intercept = 0, slope = 1, size=1) +
coord_fixed()  +
background_grid(major = "xy", minor = "none")
#install.packages("IM") # install
library(IM)
library(imager)
library(raster)
setwd("V:\\_downloads\\GitHub\\Image_Mean\\")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean and write TIF
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per.sample=16L)
#Histo Eq
m_image_tiff <- histeq(m_image_tiff)
writeTIFF(m_image_tiff,"./mean/mean_tiff_he.tif",bits.per.sample=16L)
#Read mean tif, then compare to in-memory
test_tiff <- readTIFF("./mean/mean_tiff.tif")
test_tiff[1,1,1]
test_tiff[1,1,2]
test_tiff[1,1,3]
m_image_tiff[1,1,1]
m_image_tiff[1,1,2]
m_image_tiff[1,1,3]
library(tiff)
#install.packages("IM") # install
library(IM)
library(imager)
library(raster)
library(tiff)
setwd("V:\\_downloads\\GitHub\\Image_Mean\\")
#Scan directory and store filenames in string, then count total files
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
#Use first TIF as loop file, then add all together
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
#Calculate mean and write TIF
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per.sample=16L)
#Histo Eq
m_image_tiff <- histeq(m_image_tiff)
writeTIFF(m_image_tiff,"./mean/mean_tiff_he.tif",bits.per.sample=16L)
#Read mean tif, then compare to in-memory
test_tiff <- readTIFF("./mean/mean_tiff.tif")
test_tiff[1,1,1]
test_tiff[1,1,2]
test_tiff[1,1,3]
m_image_tiff[1,1,1]
m_image_tiff[1,1,2]
m_image_tiff[1,1,3]
install.packages("RStoolbox") # install
library(IM)
library(tiff)
library(RStoolbox)
setwd("V:\\_downloads\\GitHub\\Image_Mean\\")
files <- as.character(list.files(path="./mean/input/"))
n <- length(files)
m_image_tiff <- readTIFF(paste("./mean/input/",files[1],sep=""))
for (i in 2:n){
test<-paste("./mean/input/",files[i],sep="")
tiff <- readTIFF(paste("./mean/input/",files[i],sep=""))
m_image_tiff <- (tiff+m_image_tiff)
}
m_image_tiff <- (m_image_tiff/n)
writeTIFF(m_image_tiff,"./mean/mean_tiff.tif",bits.per.sample=16L)
m_image_tiff <- ggR(rlogo, stretch = "hist") #using RStoolbox
writeTIFF(m_image_tiff,"./mean/mean_tiff_he.tif",bits.per.sample=16L)
head(m_image_tiff)
m_image_tiff <- ggR(rlogo, stretch = "hist",ggObj = FALSE) #using RStoolbox
writeTIFF(m_image_tiff,"./mean/mean_tiff_he.tif",bits.per.sample=16L)
m_image_tiff <- ggRGB(rlogo, stretch = "hist") #using RStoolbox
writeTIFF(m_image_tiff,"./mean/mean_tiff_he.tif",bits.per.sample=16L)
ggRGB(rlogo, stretch = "hist") #using RStoolbox
ggRGB(m_image_tiff, stretch = "hist") #using RStoolbox
ggR(m_image_tiff, stretch = "hist") #using RStoolbox
m_image_tiff <-   ggR(m_image_tiff, stretch = "hist") #using RStoolbox
m_image_tiff <-   ggRGB(m_image_tiff, stretch = "hist") #using RStoolbox
